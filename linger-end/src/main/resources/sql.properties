INSERT_USERS_IN_TO_USER_TABLE=INSERT INTO master.user (name,username,email,password,role) VALUES (?,?,?,?,?) RETURNING userid;
FIND_THE_USER_BY_EMAIL=SELECT userid, username,isverified, name,isactive, email, bio, password, gender, country, profileimage, followerscount, followingcount, answerscount,questioncount , creationtime ,role  FROM master.user where email=?;
GET_THE_USER_DATA_BY_USERNAME=select userid, username, isactive,  isverified,  name, email, bio, password, gender, country, profileimage, followerscount, followingcount, answerscount,questioncount , creationtime ,role from master.user where username=?;
	
INCREASE_THE_USER_FOLLOWER_COUNT=update master.user set followerscount =followerscount + 1 where username =?;
INCREASE_THE_USER_FOLLOWING_COUNT=update master.user set followingcount =followingcount + 1 where username =?;
DECREASE_THE_USER_FOLLOWER_COUNT=update master.user set followerscount = case followerscount when 0 then 0 else followerscount -1 end where username =?;
DECREASE_THE_USER_FOLLOWING_COUNT=update master.user set followingcount = case followingcount when 0 then 0 else followingcount -1 end where username =?;

INCREASE_THE_USER_QUESTION_COUNT=update master.user set questioncount =questioncount + 1 where username =?;
DECREASE_THE_USER_QUESTION_COUNT=update master.user set questioncount = case questioncount when 0 then 0 else questioncount -1 end where username =?;

INCREASE_THE_USER_ANSWER_COUNT=update master.user set answerscount =answerscount + 1 where username =?;
DECREASE_THE_USER_ANSWER_COUNT=update master.user set answerscount = case answerscount when 0 then 0 else answerscount -1 end where username =?;


# code query 
INSERT_CODE=insert into master.code(userid,code) values (?,?);
VERIFY_AND_CHANGE_THE_PASSWORD=UPDATE master.user SET password = ? WHERE userid = ( SELECT userid FROM master.code WHERE userid = (SELECT userid FROM master.user WHERE email = ?) AND code = ? AND creationtime >= NOW() - INTERVAL '10 minutes' ORDER BY creationtime DESC  LIMIT 1)
UPDATE_VERIFY_BY_CODE_EMAIL=UPDATE master.user SET isverified=true WHERE userid = ( SELECT userid FROM master.code WHERE userid = (SELECT userid FROM master.user WHERE email = ?) AND code = ? AND creationtime >= NOW() - INTERVAL '10 minutes' ORDER BY creationtime DESC  LIMIT 1)

# follow
MAKE_THE_USER_FOLLOW=insert into master.follow (follower_id,following_id) values (?,(select userid from master.user where username=?))
CHECK_IF_THE_USER_FOLLOWING=select followid from master.follow where follower_id=(select userid from master.user where username=?) and following_id=(select userid from master.user where username=?)  and markfordelete=0;
UPDATE_IF_THE_USER_ALREADY_HAVE=update master.follow set markfordelete=0 where follower_id=(select userid from master.user where username=?) and following_id=(select userid from master.user where username=?) and markfordelete=1
UNFOLLOW_THE_USER=update master.follow set markfordelete=1 where follower_id=(select userid from master.user where username=?) and following_id=(select userid from master.user where username=?)
GET_THE_FOLLOWERS_BY_USERNAME=select u.name,u.username,u.profileimage ,CASE  WHEN EXISTS ( select 1 from master.follow as f2 where f2.follower_id=(select userid from master.user where username=? and f2.following_id=u.userid)) THEN TRUE ELSE FALSE END AS isFollowing  from master.follow f inner join master.user u on u.userid=f.follower_id where f.following_id=(select userid from master.user where username=?) and f.markfordelete=0 limit ? offset ?
GET_THE_FOLLWING_BY_USERNAME=select u.name,u.username,u.profileimage ,CASE  WHEN EXISTS ( select 1 from master.follow as f2 where f2.follower_id=(select userid from master.user where username=? and f2.following_id=u.userid)) THEN TRUE ELSE FALSE END AS isFollowing  from master.follow f inner join master.user u on u.userid=f.following_id where f.follower_id=(select userid from master.user where username=?) and f.markfordelete=0 limit ? offset ?

# message
INSERT_THE_MESSAGE_IF_THE_CONVERSATION_TYPE=WITH user_ids AS (SELECT (SELECT userid FROM master.user WHERE username = ?) AS senderid, (SELECT userid FROM master.user WHERE username = ?) AS reciverid), existing_conversation AS (SELECT conversationid FROM master.conversation c, user_ids WHERE ((c.senderid = user_ids.senderid AND c.reciverid = user_ids.reciverid) OR (c.senderid = user_ids.reciverid AND c.reciverid = user_ids.senderid)) AND c.type = ?) INSERT INTO master.message (conversationid, senderid, reciverid, message) SELECT conversationid, senderid, reciverid, ? FROM existing_conversation, user_ids RETURNING senderid, reciverid;
GET_THE_MESSAGES_BY_CONVERSATION_ID=select senderid, reciverid, message, isread , creationtime from master.message where conversationid=? and markfordelete_sender=false and markfordelete_reciver=false order by creationtime desc limit ? offset ?
# conversation table
GET_THE_CONVERSATION_IF_EXIST=WITH ids AS (SELECT (SELECT userid FROM master.user WHERE username = ?) AS senderid, (SELECT userid FROM master.user WHERE username = ?) AS reciverid) SELECT c.conversationid, c.senderid, c.reciverid, c.type, c.creationtime FROM master.conversation c, ids WHERE (c.senderid = ids.senderid AND c.reciverid = ids.reciverid) OR (c.senderid = ids.reciverid AND c.reciverid = ids.senderid);
INSERT_INTO_CONVERSATION=INSERT INTO master.conversation(senderid, reciverid,type)VALUES ((select userid from master.user where username=?),(select userid from master.user where username=?),?);
TOGGLE_CONVERSATION_THE_TYPE=update master.conversation set type=? where reciverid=(select userid from master.user where username=?) and senderid=(select userid from master.user where username=?)	
GET_THE_USER_DETAILS_WHILE_CLICKING_ON_MESSAGE=WITH ids AS (SELECT (SELECT userid FROM master.user WHERE username = ?) AS senderid, (SELECT userid FROM master.user WHERE username = ?) AS reciverid) SELECT c.conversationid, c.type, u.userid, u.username, u.name, u.profileImage, u.isactive, c.senderid, c.type FROM master.conversation c INNER JOIN master.user u ON u.userid = c.senderid OR u.userid = c.reciverid INNER JOIN ids ON (c.senderid = ids.senderid AND c.reciverid = ids.reciverid) OR (c.senderid = ids.reciverid AND c.reciverid = ids.senderid) WHERE u.userid = ids.reciverid;
FETCH_FRIENDS_LIST_OF_MESSAGING=WITH ids AS (SELECT userid FROM master.user WHERE username = ?) SELECT u.name, u.userid, u.username, u.profileimage, sender.username AS senderusername, c.type FROM master.conversation c JOIN ids ON c.senderid = ids.userid OR c.reciverid = ids.userid JOIN master.user u ON (c.reciverid = u.userid AND c.senderid = ids.userid) OR (c.senderid = u.userid AND c.reciverid = ids.userid) LEFT JOIN master.user sender ON c.senderid = sender.userid;

#session 
INSERT_INTO_SESSION=insert into master.session (username,session) values(?,?)
DELETE_SESSION_IF_VERFIYED=update master.session set markfordelete =1 where  session=? and creationtime >= NOW() - INTERVAL '5 minutes'

#question 
INSERT_INTO_QUESTION=INSERT INTO master.question( userid, title, body) VALUES (?, ?, ?);

# answer
INSERT_INTO_ANSWER=WITH ids AS (SELECT (SELECT questionid FROM master.question WHERE questionid = ?) AS questionid)INSERT INTO master.answer (questionid, userid, body) SELECT ids.questionid, ?, ? FROM ids;
